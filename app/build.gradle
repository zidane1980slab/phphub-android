apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.mutualmobile.gradle.plugins.dexinfo'

// Hat tip to Jake Wharton for this - found it in the u2020 app
def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

def globalConfiguration = rootProject.extensions.getByName("ext")

android {

    compileSdkVersion globalConfiguration.getAt("ANDROID_COMPILE_SDK_VERSION") as int
    buildToolsVersion globalConfiguration.getAt("ANDROID_BUILD_TOOLS_VERSION")

    sourceSets.main {
        jniLibs.srcDirs = ['libs']
    }

    defaultConfig {
        applicationId "org.estgroup.phphub"
        minSdkVersion globalConfiguration.getAt("ANDROID_BUILD_MIN_SDK_VERSION") as int
        targetSdkVersion globalConfiguration.getAt("ANDROID_TARGET_SDK_VERSION") as int
        versionCode globalConfiguration.getAt("VERSION_CODE") as int
        versionName globalConfiguration.getAt("VERSION_NAME")

        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "CLIENT_ID", "\"${APP_CLIENT_ID}\""
        buildConfigField "String", "CLIENT_SECRET", "\"${APP_CLIENT_SECRET}\""
        buildConfigField "String", "ENDPOINT", "\"${API_ENDPOINT}\""
        buildConfigField "String", "QQ_APPID", "\"${QQ_APPID}\""
        buildConfigField "String", "QQ_APPKEY", "\"${QQ_APPKEY}\""
        buildConfigField "String", "WX_APPID", "\"${WX_APPID}\""
        buildConfigField "String", "WX_SECRET", "\"${WX_SECRET}\""

        resValue "string", "jpush_channel", JPUSH_CHANNEL
    }

    signingConfigs {
        debug {
            storeFile file('../buildsystem/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {

            def signingFile = file('../signing.properties')
            if( signingFile.canRead() ) {
                def Properties props = new Properties()
                props.load(new FileInputStream(signingFile))

                try {
                    storeFile = file( props['STORE_FILE'] )
                    storePassword = props['STORE_PASSWORD']
                    keyAlias = props['KEY_ALIAS']
                    keyPassword = props['KEY_PASSWORD']

                    println "RELEASE_BUILD: Signing..."
                } catch (e) {
                    throw new InvalidUserDataException("You should define STORE_FILE and STORE_PASSWORD and KEY_ALIAS and KEY_PASSWORD in signing.properties.")
                }
            } else {
                println "RELEASE_BUILD: signing.properties not found"
            }

        }
    }

    buildTypes {
        debug {
            versionNameSuffix "-dev"
            signingConfig signingConfigs.debug
        }
        release {
            def releaseFile = file('../release.properties')
            if( releaseFile.canRead() ) {
                def Properties props = new Properties()
                props.load(new FileInputStream(releaseFile))
                println "RELEASE_BUILD: load release.properties..."

                if (props.containsKey('APP_CLIENT_ID')) {
                    buildConfigField "String", "CLIENT_ID", "\"${props['APP_CLIENT_ID']}\""
                }

                if (props.containsKey('APP_CLIENT_SECRET')) {
                    buildConfigField "String", "CLIENT_SECRET", "\"${props['APP_CLIENT_SECRET']}\""
                }

                if (props.containsKey('API_ENDPOINT')) {
                    buildConfigField "String", "ENDPOINT", "\"${props['API_ENDPOINT']}\""
                }
            }
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // This is important, it will run lint checks but won't abort build
    lintOptions {
        abortOnError false
        disable 'InvalidPackage'
    }

    packagingOptions {
        // Butter Knife
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
    }

    productFlavors {
        development {}
        Fir {}
    }

    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [UMENG_APPKEY: UMENG_APPKEY, UMENG_CHANNEL: name, JPUSH_APPKEY: JPUSH_APPKEY]
    }

    variantFilter { variant ->
        def buildType = variant.buildType.name
        def flavorName = variant.getFlavors().get(0).name
        if (buildType.equals('debug')) {
            if (flavorName.equals('development')) {
                variant.setIgnore(false)
            } else {
                variant.setIgnore(true)
            }
        } else {
            if (flavorName.equals('development')) {
                variant.setIgnore(true)
            } else {
                variant.setIgnore(false)
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def versionName = defaultConfig.versionName.replace(".", "_")
                def fileName = outputFile.name.replace(".apk", "-v${versionName}.apk")
                fileName = fileName.replace("app", "phphub-${globalConfiguration.getAt("VERSION_CODE") as int}")
                println "[FileName]: ${fileName}"
                if (variant.buildType.name.equals('release')) {
                    output.outputFile = file("${outputFile.parent}/release/${defaultConfig.versionName}/${fileName}")
                } else {
                    output.outputFile = file("${outputFile.parent}/${fileName}")
                }
            }
        }
    }
}

def SUPPORT_VERSION = "23.3.0"
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:support-annotations:' + SUPPORT_VERSION
    compile 'com.android.support:support-v13:' + SUPPORT_VERSION
    compile 'com.android.support:cardview-v7:' + SUPPORT_VERSION
    compile 'com.android.support:support-v4:' + SUPPORT_VERSION
    compile 'com.android.support:appcompat-v7:' + SUPPORT_VERSION
    compile 'com.android.support:recyclerview-v7:' + SUPPORT_VERSION
    compile 'com.android.support:design:' + SUPPORT_VERSION

    // retrofit
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'
    compile 'com.squareup.okhttp:okhttp:2.0.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'eu.unicate.android:retroauth:1.0.3'
    // LeakCanary
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
    // fresco
    compile 'com.facebook.fresco:fresco:0.10.0'
    compile 'com.facebook.fresco:imagepipeline-okhttp:0.10.0'

    compile 'com.squareup:otto:1.3.8'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.ogaclejapan.smarttablayout:library:1.4.1@aar'
    compile 'com.ogaclejapan.smarttablayout:utils-v4:1.4.1@aar'
    compile 'io.nlopez.smartadapters:library:1.2.2'
    compile 'com.kennyc:multistateview:1.1'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'cn.bingoogolapple:bga-badgeview:1.0.2@aar'
    compile 'io.reactivex:rxandroid:1.0.1'
    compile 'io.reactivex:rxjava:1.0.14'
    compile 'com.orhanobut:logger:1.11'
    compile 'info.android15.nucleus:nucleus:2.0.1'
    compile 'info.android15.nucleus:nucleus-support-v7:2.0.1'
    compile 'info.android15.nucleus:nucleus-support-v4:2.0.1'
    compile 'com.cjj.materialrefeshlayout:library:1.3.0'
    compile 'frankiesardo:icepick:3.1.0'
    provided 'frankiesardo:icepick-processor:3.1.0'
    compile 'com.google.dagger:dagger:2.0.1'
    apt 'com.google.dagger:dagger-compiler:2.0.1'
    provided 'javax.annotation:jsr250-api:1.0'
    compile 'com.zhy:percent-support-extends:1.0.6'
    compile 'com.ocpsoft:ocpsoft-pretty-time:1.0.7'
    compile 'com.github.pwittchen:prefser:2.0.1'
    compile 'com.github.kmshack:Android-TopScrollHelper:01bdc4303a'
    compile 'me.dm7.barcodescanner:zxing:1.8.3'
    compile 'com.levelmoney.velodrome:velodrome:1.0'
    compile 'cn.pedant.sweetalert:library:1.3'
    compile 'com.mobsandgeeks:android-saripaar:2.0.3'
    compile 'com.airbnb:deeplinkdispatch:1.4.0'
    apt 'com.airbnb:deeplinkdispatch-processor:1.4.0'
    compile 'com.joanzapata.iconify:android-iconify-fontawesome:2.1.0'
    compile 'com.github.polok.localify:localify:1.0.0'
    compile 'com.github.ongakuer:PhotoDraweeView:a14f105aaa'
    compile 'com.umeng:fb:latest.integration'

    compile project(':umeng_social_sdk_res_lib')
}